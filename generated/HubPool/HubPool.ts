// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BondSet extends ethereum.Event {
  get params(): BondSet__Params {
    return new BondSet__Params(this);
  }
}

export class BondSet__Params {
  _event: BondSet;

  constructor(event: BondSet) {
    this._event = event;
  }

  get newBondToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newBondAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CrossChainContractsSet extends ethereum.Event {
  get params(): CrossChainContractsSet__Params {
    return new CrossChainContractsSet__Params(this);
  }
}

export class CrossChainContractsSet__Params {
  _event: CrossChainContractsSet;

  constructor(event: CrossChainContractsSet) {
    this._event = event;
  }

  get l2ChainId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get adapter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get spokePool(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class EmergencyRootBundleDeleted extends ethereum.Event {
  get params(): EmergencyRootBundleDeleted__Params {
    return new EmergencyRootBundleDeleted__Params(this);
  }
}

export class EmergencyRootBundleDeleted__Params {
  _event: EmergencyRootBundleDeleted;

  constructor(event: EmergencyRootBundleDeleted) {
    this._event = event;
  }

  get poolRebalanceRoot(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get relayerRefundRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get slowRelayRoot(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get proposer(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class IdentifierSet extends ethereum.Event {
  get params(): IdentifierSet__Params {
    return new IdentifierSet__Params(this);
  }
}

export class IdentifierSet__Params {
  _event: IdentifierSet;

  constructor(event: IdentifierSet) {
    this._event = event;
  }

  get newIdentifier(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class L1TokenEnabledForLiquidityProvision extends ethereum.Event {
  get params(): L1TokenEnabledForLiquidityProvision__Params {
    return new L1TokenEnabledForLiquidityProvision__Params(this);
  }
}

export class L1TokenEnabledForLiquidityProvision__Params {
  _event: L1TokenEnabledForLiquidityProvision;

  constructor(event: L1TokenEnabledForLiquidityProvision) {
    this._event = event;
  }

  get l1Token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class L2TokenDisabledForLiquidityProvision extends ethereum.Event {
  get params(): L2TokenDisabledForLiquidityProvision__Params {
    return new L2TokenDisabledForLiquidityProvision__Params(this);
  }
}

export class L2TokenDisabledForLiquidityProvision__Params {
  _event: L2TokenDisabledForLiquidityProvision;

  constructor(event: L2TokenDisabledForLiquidityProvision) {
    this._event = event;
  }

  get l1Token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get l1Token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpTokensMinted(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidityProvider(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get l1Token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpTokensBurnt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidityProvider(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LivenessSet extends ethereum.Event {
  get params(): LivenessSet__Params {
    return new LivenessSet__Params(this);
  }
}

export class LivenessSet__Params {
  _event: LivenessSet;

  constructor(event: LivenessSet) {
    this._event = event;
  }

  get newLiveness(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get isPaused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class ProposeRootBundle extends ethereum.Event {
  get params(): ProposeRootBundle__Params {
    return new ProposeRootBundle__Params(this);
  }
}

export class ProposeRootBundle__Params {
  _event: ProposeRootBundle;

  constructor(event: ProposeRootBundle) {
    this._event = event;
  }

  get challengePeriodEndTimestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolRebalanceLeafCount(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get bundleEvaluationBlockNumbers(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get poolRebalanceRoot(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get relayerRefundRoot(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get slowRelayRoot(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get proposer(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class ProtocolFeeCaptureSet extends ethereum.Event {
  get params(): ProtocolFeeCaptureSet__Params {
    return new ProtocolFeeCaptureSet__Params(this);
  }
}

export class ProtocolFeeCaptureSet__Params {
  _event: ProtocolFeeCaptureSet;

  constructor(event: ProtocolFeeCaptureSet) {
    this._event = event;
  }

  get newProtocolFeeCaptureAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newProtocolFeeCapturePct(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProtocolFeesCapturedClaimed extends ethereum.Event {
  get params(): ProtocolFeesCapturedClaimed__Params {
    return new ProtocolFeesCapturedClaimed__Params(this);
  }
}

export class ProtocolFeesCapturedClaimed__Params {
  _event: ProtocolFeesCapturedClaimed;

  constructor(event: ProtocolFeesCapturedClaimed) {
    this._event = event;
  }

  get l1Token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get accumulatedFees(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RootBundleCanceled extends ethereum.Event {
  get params(): RootBundleCanceled__Params {
    return new RootBundleCanceled__Params(this);
  }
}

export class RootBundleCanceled__Params {
  _event: RootBundleCanceled;

  constructor(event: RootBundleCanceled) {
    this._event = event;
  }

  get disputer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RootBundleDisputed extends ethereum.Event {
  get params(): RootBundleDisputed__Params {
    return new RootBundleDisputed__Params(this);
  }
}

export class RootBundleDisputed__Params {
  _event: RootBundleDisputed;

  constructor(event: RootBundleDisputed) {
    this._event = event;
  }

  get disputer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RootBundleExecuted extends ethereum.Event {
  get params(): RootBundleExecuted__Params {
    return new RootBundleExecuted__Params(this);
  }
}

export class RootBundleExecuted__Params {
  _event: RootBundleExecuted;

  constructor(event: RootBundleExecuted) {
    this._event = event;
  }

  get groupIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get leafId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get chainId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get l1Tokens(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }

  get bundleLpFees(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }

  get netSendAmounts(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }

  get runningBalances(): Array<BigInt> {
    return this._event.parameters[6].value.toBigIntArray();
  }

  get caller(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class SetEnableDepositRoute extends ethereum.Event {
  get params(): SetEnableDepositRoute__Params {
    return new SetEnableDepositRoute__Params(this);
  }
}

export class SetEnableDepositRoute__Params {
  _event: SetEnableDepositRoute;

  constructor(event: SetEnableDepositRoute) {
    this._event = event;
  }

  get originChainId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get destinationChainId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get originToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get depositsEnabled(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class SetPoolRebalanceRoute extends ethereum.Event {
  get params(): SetPoolRebalanceRoute__Params {
    return new SetPoolRebalanceRoute__Params(this);
  }
}

export class SetPoolRebalanceRoute__Params {
  _event: SetPoolRebalanceRoute;

  constructor(event: SetPoolRebalanceRoute) {
    this._event = event;
  }

  get destinationChainId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get l1Token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get destinationToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SpokePoolAdminFunctionTriggered extends ethereum.Event {
  get params(): SpokePoolAdminFunctionTriggered__Params {
    return new SpokePoolAdminFunctionTriggered__Params(this);
  }
}

export class SpokePoolAdminFunctionTriggered__Params {
  _event: SpokePoolAdminFunctionTriggered;

  constructor(event: SpokePoolAdminFunctionTriggered) {
    this._event = event;
  }

  get chainId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get message(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class HubPool__crossChainContractsResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getAdapter(): Address {
    return this.value0;
  }

  getSpokePool(): Address {
    return this.value1;
  }
}

export class HubPool__pooledTokensResult {
  value0: Address;
  value1: boolean;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getLpToken(): Address {
    return this.value0;
  }

  getIsEnabled(): boolean {
    return this.value1;
  }

  getLastLpFeeUpdate(): BigInt {
    return this.value2;
  }

  getUtilizedReserves(): BigInt {
    return this.value3;
  }

  getLiquidReserves(): BigInt {
    return this.value4;
  }

  getUndistributedLpFees(): BigInt {
    return this.value5;
  }
}

export class HubPool__rootBundleProposalResult {
  value0: Bytes;
  value1: Bytes;
  value2: Bytes;
  value3: BigInt;
  value4: Address;
  value5: i32;
  value6: BigInt;

  constructor(
    value0: Bytes,
    value1: Bytes,
    value2: Bytes,
    value3: BigInt,
    value4: Address,
    value5: i32,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getPoolRebalanceRoot(): Bytes {
    return this.value0;
  }

  getRelayerRefundRoot(): Bytes {
    return this.value1;
  }

  getSlowRelayRoot(): Bytes {
    return this.value2;
  }

  getClaimedBitMap(): BigInt {
    return this.value3;
  }

  getProposer(): Address {
    return this.value4;
  }

  getUnclaimedPoolRebalanceLeafCount(): i32 {
    return this.value5;
  }

  getChallengePeriodEndTimestamp(): BigInt {
    return this.value6;
  }
}

export class HubPool extends ethereum.SmartContract {
  static bind(address: Address): HubPool {
    return new HubPool("HubPool", address);
  }

  bondAmount(): BigInt {
    let result = super.call("bondAmount", "bondAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bondAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bondAmount", "bondAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bondToken(): Address {
    let result = super.call("bondToken", "bondToken():(address)", []);

    return result[0].toAddress();
  }

  try_bondToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("bondToken", "bondToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  crossChainContracts(param0: BigInt): HubPool__crossChainContractsResult {
    let result = super.call(
      "crossChainContracts",
      "crossChainContracts(uint256):(address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new HubPool__crossChainContractsResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_crossChainContracts(
    param0: BigInt
  ): ethereum.CallResult<HubPool__crossChainContractsResult> {
    let result = super.tryCall(
      "crossChainContracts",
      "crossChainContracts(uint256):(address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HubPool__crossChainContractsResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  exchangeRateCurrent(l1Token: Address): BigInt {
    let result = super.call(
      "exchangeRateCurrent",
      "exchangeRateCurrent(address):(uint256)",
      [ethereum.Value.fromAddress(l1Token)]
    );

    return result[0].toBigInt();
  }

  try_exchangeRateCurrent(l1Token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateCurrent",
      "exchangeRateCurrent(address):(uint256)",
      [ethereum.Value.fromAddress(l1Token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  finder(): Address {
    let result = super.call("finder", "finder():(address)", []);

    return result[0].toAddress();
  }

  try_finder(): ethereum.CallResult<Address> {
    let result = super.tryCall("finder", "finder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentTime(): BigInt {
    let result = super.call("getCurrentTime", "getCurrentTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCurrentTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentTime",
      "getCurrentTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  identifier(): Bytes {
    let result = super.call("identifier", "identifier():(bytes32)", []);

    return result[0].toBytes();
  }

  try_identifier(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("identifier", "identifier():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  liquidityUtilizationCurrent(l1Token: Address): BigInt {
    let result = super.call(
      "liquidityUtilizationCurrent",
      "liquidityUtilizationCurrent(address):(uint256)",
      [ethereum.Value.fromAddress(l1Token)]
    );

    return result[0].toBigInt();
  }

  try_liquidityUtilizationCurrent(
    l1Token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityUtilizationCurrent",
      "liquidityUtilizationCurrent(address):(uint256)",
      [ethereum.Value.fromAddress(l1Token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityUtilizationPostRelay(
    l1Token: Address,
    relayedAmount: BigInt
  ): BigInt {
    let result = super.call(
      "liquidityUtilizationPostRelay",
      "liquidityUtilizationPostRelay(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(l1Token),
        ethereum.Value.fromUnsignedBigInt(relayedAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidityUtilizationPostRelay(
    l1Token: Address,
    relayedAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityUtilizationPostRelay",
      "liquidityUtilizationPostRelay(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(l1Token),
        ethereum.Value.fromUnsignedBigInt(relayedAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liveness(): BigInt {
    let result = super.call("liveness", "liveness():(uint32)", []);

    return result[0].toBigInt();
  }

  try_liveness(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liveness", "liveness():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpFeeRatePerSecond(): BigInt {
    let result = super.call(
      "lpFeeRatePerSecond",
      "lpFeeRatePerSecond():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lpFeeRatePerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lpFeeRatePerSecond",
      "lpFeeRatePerSecond():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpTokenFactory(): Address {
    let result = super.call("lpTokenFactory", "lpTokenFactory():(address)", []);

    return result[0].toAddress();
  }

  try_lpTokenFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lpTokenFactory",
      "lpTokenFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolRebalanceRoute(destinationChainId: BigInt, l1Token: Address): Address {
    let result = super.call(
      "poolRebalanceRoute",
      "poolRebalanceRoute(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(destinationChainId),
        ethereum.Value.fromAddress(l1Token)
      ]
    );

    return result[0].toAddress();
  }

  try_poolRebalanceRoute(
    destinationChainId: BigInt,
    l1Token: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolRebalanceRoute",
      "poolRebalanceRoute(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(destinationChainId),
        ethereum.Value.fromAddress(l1Token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pooledTokens(param0: Address): HubPool__pooledTokensResult {
    let result = super.call(
      "pooledTokens",
      "pooledTokens(address):(address,bool,uint32,int256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new HubPool__pooledTokensResult(
      result[0].toAddress(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_pooledTokens(
    param0: Address
  ): ethereum.CallResult<HubPool__pooledTokensResult> {
    let result = super.tryCall(
      "pooledTokens",
      "pooledTokens(address):(address,bool,uint32,int256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HubPool__pooledTokensResult(
        value[0].toAddress(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  protocolFeeCaptureAddress(): Address {
    let result = super.call(
      "protocolFeeCaptureAddress",
      "protocolFeeCaptureAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_protocolFeeCaptureAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolFeeCaptureAddress",
      "protocolFeeCaptureAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFeeCapturePct(): BigInt {
    let result = super.call(
      "protocolFeeCapturePct",
      "protocolFeeCapturePct():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolFeeCapturePct(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFeeCapturePct",
      "protocolFeeCapturePct():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rootBundleProposal(): HubPool__rootBundleProposalResult {
    let result = super.call(
      "rootBundleProposal",
      "rootBundleProposal():(bytes32,bytes32,bytes32,uint256,address,uint8,uint32)",
      []
    );

    return new HubPool__rootBundleProposalResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBytes(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toI32(),
      result[6].toBigInt()
    );
  }

  try_rootBundleProposal(): ethereum.CallResult<
    HubPool__rootBundleProposalResult
  > {
    let result = super.tryCall(
      "rootBundleProposal",
      "rootBundleProposal():(bytes32,bytes32,bytes32,uint256,address,uint8,uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HubPool__rootBundleProposalResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBytes(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toI32(),
        value[6].toBigInt()
      )
    );
  }

  timerAddress(): Address {
    let result = super.call("timerAddress", "timerAddress():(address)", []);

    return result[0].toAddress();
  }

  try_timerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("timerAddress", "timerAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unclaimedAccumulatedProtocolFees(param0: Address): BigInt {
    let result = super.call(
      "unclaimedAccumulatedProtocolFees",
      "unclaimedAccumulatedProtocolFees(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_unclaimedAccumulatedProtocolFees(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unclaimedAccumulatedProtocolFees",
      "unclaimedAccumulatedProtocolFees(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _lpTokenFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _finder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _timer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get l1Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get l1TokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }
}

export class ClaimProtocolFeesCapturedCall extends ethereum.Call {
  get inputs(): ClaimProtocolFeesCapturedCall__Inputs {
    return new ClaimProtocolFeesCapturedCall__Inputs(this);
  }

  get outputs(): ClaimProtocolFeesCapturedCall__Outputs {
    return new ClaimProtocolFeesCapturedCall__Outputs(this);
  }
}

export class ClaimProtocolFeesCapturedCall__Inputs {
  _call: ClaimProtocolFeesCapturedCall;

  constructor(call: ClaimProtocolFeesCapturedCall) {
    this._call = call;
  }

  get l1Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimProtocolFeesCapturedCall__Outputs {
  _call: ClaimProtocolFeesCapturedCall;

  constructor(call: ClaimProtocolFeesCapturedCall) {
    this._call = call;
  }
}

export class DisableL1TokenForLiquidityProvisionCall extends ethereum.Call {
  get inputs(): DisableL1TokenForLiquidityProvisionCall__Inputs {
    return new DisableL1TokenForLiquidityProvisionCall__Inputs(this);
  }

  get outputs(): DisableL1TokenForLiquidityProvisionCall__Outputs {
    return new DisableL1TokenForLiquidityProvisionCall__Outputs(this);
  }
}

export class DisableL1TokenForLiquidityProvisionCall__Inputs {
  _call: DisableL1TokenForLiquidityProvisionCall;

  constructor(call: DisableL1TokenForLiquidityProvisionCall) {
    this._call = call;
  }

  get l1Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableL1TokenForLiquidityProvisionCall__Outputs {
  _call: DisableL1TokenForLiquidityProvisionCall;

  constructor(call: DisableL1TokenForLiquidityProvisionCall) {
    this._call = call;
  }
}

export class DisputeRootBundleCall extends ethereum.Call {
  get inputs(): DisputeRootBundleCall__Inputs {
    return new DisputeRootBundleCall__Inputs(this);
  }

  get outputs(): DisputeRootBundleCall__Outputs {
    return new DisputeRootBundleCall__Outputs(this);
  }
}

export class DisputeRootBundleCall__Inputs {
  _call: DisputeRootBundleCall;

  constructor(call: DisputeRootBundleCall) {
    this._call = call;
  }
}

export class DisputeRootBundleCall__Outputs {
  _call: DisputeRootBundleCall;

  constructor(call: DisputeRootBundleCall) {
    this._call = call;
  }
}

export class EmergencyDeleteProposalCall extends ethereum.Call {
  get inputs(): EmergencyDeleteProposalCall__Inputs {
    return new EmergencyDeleteProposalCall__Inputs(this);
  }

  get outputs(): EmergencyDeleteProposalCall__Outputs {
    return new EmergencyDeleteProposalCall__Outputs(this);
  }
}

export class EmergencyDeleteProposalCall__Inputs {
  _call: EmergencyDeleteProposalCall;

  constructor(call: EmergencyDeleteProposalCall) {
    this._call = call;
  }
}

export class EmergencyDeleteProposalCall__Outputs {
  _call: EmergencyDeleteProposalCall;

  constructor(call: EmergencyDeleteProposalCall) {
    this._call = call;
  }
}

export class EnableL1TokenForLiquidityProvisionCall extends ethereum.Call {
  get inputs(): EnableL1TokenForLiquidityProvisionCall__Inputs {
    return new EnableL1TokenForLiquidityProvisionCall__Inputs(this);
  }

  get outputs(): EnableL1TokenForLiquidityProvisionCall__Outputs {
    return new EnableL1TokenForLiquidityProvisionCall__Outputs(this);
  }
}

export class EnableL1TokenForLiquidityProvisionCall__Inputs {
  _call: EnableL1TokenForLiquidityProvisionCall;

  constructor(call: EnableL1TokenForLiquidityProvisionCall) {
    this._call = call;
  }

  get l1Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableL1TokenForLiquidityProvisionCall__Outputs {
  _call: EnableL1TokenForLiquidityProvisionCall;

  constructor(call: EnableL1TokenForLiquidityProvisionCall) {
    this._call = call;
  }
}

export class ExchangeRateCurrentCall extends ethereum.Call {
  get inputs(): ExchangeRateCurrentCall__Inputs {
    return new ExchangeRateCurrentCall__Inputs(this);
  }

  get outputs(): ExchangeRateCurrentCall__Outputs {
    return new ExchangeRateCurrentCall__Outputs(this);
  }
}

export class ExchangeRateCurrentCall__Inputs {
  _call: ExchangeRateCurrentCall;

  constructor(call: ExchangeRateCurrentCall) {
    this._call = call;
  }

  get l1Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ExchangeRateCurrentCall__Outputs {
  _call: ExchangeRateCurrentCall;

  constructor(call: ExchangeRateCurrentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteRootBundleCall extends ethereum.Call {
  get inputs(): ExecuteRootBundleCall__Inputs {
    return new ExecuteRootBundleCall__Inputs(this);
  }

  get outputs(): ExecuteRootBundleCall__Outputs {
    return new ExecuteRootBundleCall__Outputs(this);
  }
}

export class ExecuteRootBundleCall__Inputs {
  _call: ExecuteRootBundleCall;

  constructor(call: ExecuteRootBundleCall) {
    this._call = call;
  }

  get chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get groupIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bundleLpFees(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get netSendAmounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get runningBalances(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get leafId(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get l1Tokens(): Array<Address> {
    return this._call.inputValues[6].value.toAddressArray();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[7].value.toBytesArray();
  }
}

export class ExecuteRootBundleCall__Outputs {
  _call: ExecuteRootBundleCall;

  constructor(call: ExecuteRootBundleCall) {
    this._call = call;
  }
}

export class HaircutReservesCall extends ethereum.Call {
  get inputs(): HaircutReservesCall__Inputs {
    return new HaircutReservesCall__Inputs(this);
  }

  get outputs(): HaircutReservesCall__Outputs {
    return new HaircutReservesCall__Outputs(this);
  }
}

export class HaircutReservesCall__Inputs {
  _call: HaircutReservesCall;

  constructor(call: HaircutReservesCall) {
    this._call = call;
  }

  get l1Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get haircutAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class HaircutReservesCall__Outputs {
  _call: HaircutReservesCall;

  constructor(call: HaircutReservesCall) {
    this._call = call;
  }
}

export class LiquidityUtilizationCurrentCall extends ethereum.Call {
  get inputs(): LiquidityUtilizationCurrentCall__Inputs {
    return new LiquidityUtilizationCurrentCall__Inputs(this);
  }

  get outputs(): LiquidityUtilizationCurrentCall__Outputs {
    return new LiquidityUtilizationCurrentCall__Outputs(this);
  }
}

export class LiquidityUtilizationCurrentCall__Inputs {
  _call: LiquidityUtilizationCurrentCall;

  constructor(call: LiquidityUtilizationCurrentCall) {
    this._call = call;
  }

  get l1Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LiquidityUtilizationCurrentCall__Outputs {
  _call: LiquidityUtilizationCurrentCall;

  constructor(call: LiquidityUtilizationCurrentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidityUtilizationPostRelayCall extends ethereum.Call {
  get inputs(): LiquidityUtilizationPostRelayCall__Inputs {
    return new LiquidityUtilizationPostRelayCall__Inputs(this);
  }

  get outputs(): LiquidityUtilizationPostRelayCall__Outputs {
    return new LiquidityUtilizationPostRelayCall__Outputs(this);
  }
}

export class LiquidityUtilizationPostRelayCall__Inputs {
  _call: LiquidityUtilizationPostRelayCall;

  constructor(call: LiquidityUtilizationPostRelayCall) {
    this._call = call;
  }

  get l1Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get relayedAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LiquidityUtilizationPostRelayCall__Outputs {
  _call: LiquidityUtilizationPostRelayCall;

  constructor(call: LiquidityUtilizationPostRelayCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LoadEthForL2CallsCall extends ethereum.Call {
  get inputs(): LoadEthForL2CallsCall__Inputs {
    return new LoadEthForL2CallsCall__Inputs(this);
  }

  get outputs(): LoadEthForL2CallsCall__Outputs {
    return new LoadEthForL2CallsCall__Outputs(this);
  }
}

export class LoadEthForL2CallsCall__Inputs {
  _call: LoadEthForL2CallsCall;

  constructor(call: LoadEthForL2CallsCall) {
    this._call = call;
  }
}

export class LoadEthForL2CallsCall__Outputs {
  _call: LoadEthForL2CallsCall;

  constructor(call: LoadEthForL2CallsCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class ProposeRootBundleCall extends ethereum.Call {
  get inputs(): ProposeRootBundleCall__Inputs {
    return new ProposeRootBundleCall__Inputs(this);
  }

  get outputs(): ProposeRootBundleCall__Outputs {
    return new ProposeRootBundleCall__Outputs(this);
  }
}

export class ProposeRootBundleCall__Inputs {
  _call: ProposeRootBundleCall;

  constructor(call: ProposeRootBundleCall) {
    this._call = call;
  }

  get bundleEvaluationBlockNumbers(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get poolRebalanceLeafCount(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get poolRebalanceRoot(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get relayerRefundRoot(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get slowRelayRoot(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ProposeRootBundleCall__Outputs {
  _call: ProposeRootBundleCall;

  constructor(call: ProposeRootBundleCall) {
    this._call = call;
  }
}

export class RelaySpokePoolAdminFunctionCall extends ethereum.Call {
  get inputs(): RelaySpokePoolAdminFunctionCall__Inputs {
    return new RelaySpokePoolAdminFunctionCall__Inputs(this);
  }

  get outputs(): RelaySpokePoolAdminFunctionCall__Outputs {
    return new RelaySpokePoolAdminFunctionCall__Outputs(this);
  }
}

export class RelaySpokePoolAdminFunctionCall__Inputs {
  _call: RelaySpokePoolAdminFunctionCall;

  constructor(call: RelaySpokePoolAdminFunctionCall) {
    this._call = call;
  }

  get chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get functionData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RelaySpokePoolAdminFunctionCall__Outputs {
  _call: RelaySpokePoolAdminFunctionCall;

  constructor(call: RelaySpokePoolAdminFunctionCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get l1Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lpTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sendEth(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBondCall extends ethereum.Call {
  get inputs(): SetBondCall__Inputs {
    return new SetBondCall__Inputs(this);
  }

  get outputs(): SetBondCall__Outputs {
    return new SetBondCall__Outputs(this);
  }
}

export class SetBondCall__Inputs {
  _call: SetBondCall;

  constructor(call: SetBondCall) {
    this._call = call;
  }

  get newBondToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newBondAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBondCall__Outputs {
  _call: SetBondCall;

  constructor(call: SetBondCall) {
    this._call = call;
  }
}

export class SetCrossChainContractsCall extends ethereum.Call {
  get inputs(): SetCrossChainContractsCall__Inputs {
    return new SetCrossChainContractsCall__Inputs(this);
  }

  get outputs(): SetCrossChainContractsCall__Outputs {
    return new SetCrossChainContractsCall__Outputs(this);
  }
}

export class SetCrossChainContractsCall__Inputs {
  _call: SetCrossChainContractsCall;

  constructor(call: SetCrossChainContractsCall) {
    this._call = call;
  }

  get l2ChainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get adapter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get spokePool(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetCrossChainContractsCall__Outputs {
  _call: SetCrossChainContractsCall;

  constructor(call: SetCrossChainContractsCall) {
    this._call = call;
  }
}

export class SetCurrentTimeCall extends ethereum.Call {
  get inputs(): SetCurrentTimeCall__Inputs {
    return new SetCurrentTimeCall__Inputs(this);
  }

  get outputs(): SetCurrentTimeCall__Outputs {
    return new SetCurrentTimeCall__Outputs(this);
  }
}

export class SetCurrentTimeCall__Inputs {
  _call: SetCurrentTimeCall;

  constructor(call: SetCurrentTimeCall) {
    this._call = call;
  }

  get time(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCurrentTimeCall__Outputs {
  _call: SetCurrentTimeCall;

  constructor(call: SetCurrentTimeCall) {
    this._call = call;
  }
}

export class SetDepositRouteCall extends ethereum.Call {
  get inputs(): SetDepositRouteCall__Inputs {
    return new SetDepositRouteCall__Inputs(this);
  }

  get outputs(): SetDepositRouteCall__Outputs {
    return new SetDepositRouteCall__Outputs(this);
  }
}

export class SetDepositRouteCall__Inputs {
  _call: SetDepositRouteCall;

  constructor(call: SetDepositRouteCall) {
    this._call = call;
  }

  get originChainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get destinationChainId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get originToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get depositsEnabled(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SetDepositRouteCall__Outputs {
  _call: SetDepositRouteCall;

  constructor(call: SetDepositRouteCall) {
    this._call = call;
  }
}

export class SetIdentifierCall extends ethereum.Call {
  get inputs(): SetIdentifierCall__Inputs {
    return new SetIdentifierCall__Inputs(this);
  }

  get outputs(): SetIdentifierCall__Outputs {
    return new SetIdentifierCall__Outputs(this);
  }
}

export class SetIdentifierCall__Inputs {
  _call: SetIdentifierCall;

  constructor(call: SetIdentifierCall) {
    this._call = call;
  }

  get newIdentifier(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetIdentifierCall__Outputs {
  _call: SetIdentifierCall;

  constructor(call: SetIdentifierCall) {
    this._call = call;
  }
}

export class SetLivenessCall extends ethereum.Call {
  get inputs(): SetLivenessCall__Inputs {
    return new SetLivenessCall__Inputs(this);
  }

  get outputs(): SetLivenessCall__Outputs {
    return new SetLivenessCall__Outputs(this);
  }
}

export class SetLivenessCall__Inputs {
  _call: SetLivenessCall;

  constructor(call: SetLivenessCall) {
    this._call = call;
  }

  get newLiveness(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLivenessCall__Outputs {
  _call: SetLivenessCall;

  constructor(call: SetLivenessCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get pause(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetPoolRebalanceRouteCall extends ethereum.Call {
  get inputs(): SetPoolRebalanceRouteCall__Inputs {
    return new SetPoolRebalanceRouteCall__Inputs(this);
  }

  get outputs(): SetPoolRebalanceRouteCall__Outputs {
    return new SetPoolRebalanceRouteCall__Outputs(this);
  }
}

export class SetPoolRebalanceRouteCall__Inputs {
  _call: SetPoolRebalanceRouteCall;

  constructor(call: SetPoolRebalanceRouteCall) {
    this._call = call;
  }

  get destinationChainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get l1Token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get destinationToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetPoolRebalanceRouteCall__Outputs {
  _call: SetPoolRebalanceRouteCall;

  constructor(call: SetPoolRebalanceRouteCall) {
    this._call = call;
  }
}

export class SetProtocolFeeCaptureCall extends ethereum.Call {
  get inputs(): SetProtocolFeeCaptureCall__Inputs {
    return new SetProtocolFeeCaptureCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeCaptureCall__Outputs {
    return new SetProtocolFeeCaptureCall__Outputs(this);
  }
}

export class SetProtocolFeeCaptureCall__Inputs {
  _call: SetProtocolFeeCaptureCall;

  constructor(call: SetProtocolFeeCaptureCall) {
    this._call = call;
  }

  get newProtocolFeeCaptureAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newProtocolFeeCapturePct(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetProtocolFeeCaptureCall__Outputs {
  _call: SetProtocolFeeCaptureCall;

  constructor(call: SetProtocolFeeCaptureCall) {
    this._call = call;
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }

  get l1Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
