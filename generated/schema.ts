// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class HubPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HubPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HubPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HubPool", id.toString(), this);
    }
  }

  static load(id: string): HubPool | null {
    return changetype<HubPool | null>(store.get("HubPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cumulativeUniqueLiquidityProviders(): Array<string> | null {
    let value = this.get("cumulativeUniqueLiquidityProviders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cumulativeUniqueLiquidityProviders(value: Array<string> | null) {
    if (!value) {
      this.unset("cumulativeUniqueLiquidityProviders");
    } else {
      this.set(
        "cumulativeUniqueLiquidityProviders",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get cumulativeUniqueLiquidityProvidersCount(): BigInt {
    let value = this.get("cumulativeUniqueLiquidityProvidersCount");
    return value!.toBigInt();
  }

  set cumulativeUniqueLiquidityProvidersCount(value: BigInt) {
    this.set(
      "cumulativeUniqueLiquidityProvidersCount",
      Value.fromBigInt(value)
    );
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addedLiquidities(): Array<string> | null {
    let value = this.get("addedLiquidities");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set addedLiquidities(value: Array<string> | null) {
    if (!value) {
      this.unset("addedLiquidities");
    } else {
      this.set("addedLiquidities", Value.fromStringArray(<Array<string>>value));
    }
  }

  get removedLiquidities(): Array<string> | null {
    let value = this.get("removedLiquidities");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set removedLiquidities(value: Array<string> | null) {
    if (!value) {
      this.unset("removedLiquidities");
    } else {
      this.set(
        "removedLiquidities",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get addedLiquidityCount(): BigInt {
    let value = this.get("addedLiquidityCount");
    return value!.toBigInt();
  }

  set addedLiquidityCount(value: BigInt) {
    this.set("addedLiquidityCount", Value.fromBigInt(value));
  }

  get removedLiquidityCount(): BigInt {
    let value = this.get("removedLiquidityCount");
    return value!.toBigInt();
  }

  set removedLiquidityCount(value: BigInt) {
    this.set("removedLiquidityCount", Value.fromBigInt(value));
  }
}

export class AddedLiquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddedLiquidity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AddedLiquidity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AddedLiquidity", id.toString(), this);
    }
  }

  static load(id: string): AddedLiquidity | null {
    return changetype<AddedLiquidity | null>(store.get("AddedLiquidity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get l1Token(): Bytes {
    let value = this.get("l1Token");
    return value!.toBytes();
  }

  set l1Token(value: Bytes) {
    this.set("l1Token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get lpTokensMinted(): BigInt {
    let value = this.get("lpTokensMinted");
    return value!.toBigInt();
  }

  set lpTokensMinted(value: BigInt) {
    this.set("lpTokensMinted", Value.fromBigInt(value));
  }

  get liquidityProvider(): string {
    let value = this.get("liquidityProvider");
    return value!.toString();
  }

  set liquidityProvider(value: string) {
    this.set("liquidityProvider", Value.fromString(value));
  }
}

export class RemovedLiquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemovedLiquidity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RemovedLiquidity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemovedLiquidity", id.toString(), this);
    }
  }

  static load(id: string): RemovedLiquidity | null {
    return changetype<RemovedLiquidity | null>(
      store.get("RemovedLiquidity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get l1Token(): Bytes {
    let value = this.get("l1Token");
    return value!.toBytes();
  }

  set l1Token(value: Bytes) {
    this.set("l1Token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get lpTokensBurnt(): BigInt {
    let value = this.get("lpTokensBurnt");
    return value!.toBigInt();
  }

  set lpTokensBurnt(value: BigInt) {
    this.set("lpTokensBurnt", Value.fromBigInt(value));
  }

  get liquidityProvider(): string {
    let value = this.get("liquidityProvider");
    return value!.toString();
  }

  set liquidityProvider(value: string) {
    this.set("liquidityProvider", Value.fromString(value));
  }
}
