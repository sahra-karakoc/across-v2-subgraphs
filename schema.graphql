type HubPool @entity {  
 " Set to 1 because it is unique" 
   id: ID! 

   cumulativeUniqueLiquidityProviders: [User!]
   cumulativeUniqueLiquidityProvidersCount: BigInt!

}
type User @entity {
  " Address of the liquidity provider"
  id: ID! 

  " List of liquidityAdded entities by the user"
  addedLiquidities: [AddedLiquidity!] @derivedFrom(field:"liquidityProvider")

" List of liquidityRemoved entities by the user"
  removedLiquidities: [RemovedLiquidity!] @derivedFrom(field:"liquidityProvider")

  " Number of liquidityAdded entities by the user, also used as index to produce id for liquidityAdded entities"
  addedLiquidityCount: BigInt!

    " Number of liquidityRemoved entities by the user, also used as index to produce id for liquidityRemoved entities"
  removedLiquidityCount: BigInt! 

}

type AddedLiquidity @entity {
  # { Smart contract address of the l1 token } - { Address of the liquidity provider } - { index }
  # where index is the index of the liquidity added by this address to Hub Pool v2
  # @notice that one address can provide liquidity for different 
  # l1Tokens hence some l1-address-index id combinations might not exist
  id: ID!

  " Smart contract address of the l1 token of the added liquidity"
  l1Token: Bytes!

  " Amount of the l1 token added as liquidity"
  amount: BigInt!

  " Amount of the lp tokens minted"
  lpTokensMinted: BigInt!

  " Address of the liquidity provider"
  liquidityProvider: User!
}

type RemovedLiquidity @entity {
  # { Smart contract address of the l1 token } - { Address of the liquidity provider } - { index }
  # where index is the index of the liquidity removed by this address from Hub Pool v2
  # @notice that one address can removed liquidity for different 
  # l1Tokens hence some l1-address-index id combinations might not exist
  id: ID!

  " Smart contract address of the l1 token of the removed liquidity"
  l1Token: Bytes!

  " Amount of the l1 token removed"
  amount: BigInt!

  " Amount of the lp tokens burnt"
  lpTokensBurnt: BigInt!

  " Address of the liquidity provider"
  liquidityProvider: User!
}

# TODO hourly snapshot of the HubPool
# TODO daility snapshot of the HubPool

# enum AddedOrRemoved  {
#   Added
#   Removed
# }